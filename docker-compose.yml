services:
  web-app:
    build:
      context: .
    ports:
      - "8000:8000"
    volumes:
      - ./shop:/shop

    command: >
      sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"

    environment:
      - DB_HOST=database
      - DB_NAME=dbname
      - DB_USER=dbuser
      - DB_PASS=pass

    restart: always

    env_file:
      - /.env

    healthcheck:
      test: "curl -s localhost:8000/api/healthcheck"
      interval: 5s
      timeout: 5s
      retries: 3

    depends_on:
      database:
        condition: service_healthy

  database:
    image: postgres:15.3-alpine3.18
    environment:
      - POSTGRES_DB=dbname
      - POSTGRES_USER=dbuser
      - POSTGRES_PASSWORD=pass

    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.0.11-alpine
    hostname: redis
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5

  worker:
    build:
      context: .
    hostname: worker
    entrypoint: celery
    command: -A celery_app.app worker --loglevel=info
    volumes:
      - ./shop:/shop

    links:
      - redis
    depends_on:
      database:
        condition: service_healthy
      web-app:
        condition: service_healthy
      redis:
        condition: service_healthy

    environment:
      - DB_HOST=database
      - DB_NAME=dbname
      - DB_USER=dbuser
      - DB_PASS=pass

    env_file:
      - /.env

    deploy:
      replicas: 2

  flower:
    build:
      context: .
    hostname: flower
    entrypoint: celery
    command: -A celery_app.app flower
    volumes:
      - ./shop:/shop
    links:
      - redis
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "5555:5555"
    env_file:
      - /.env
